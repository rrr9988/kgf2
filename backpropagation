#MULTI layer
# multilayer propogation- back propogation
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)

# Generate synthetic data for demonstration
np.random.seed(42)
X = np.random.rand(100, 10)
y = np.random.randint(2, size=(100, 1))

# Define the architecture of the neural network
input_size = X.shape[1]
hidden_size = 64
output_size = 1

# Initialize weights and biases
weights_input_hidden = np.random.randn(input_size, hidden_size)
biases_input_hidden = np.zeros((1, hidden_size))

weights_hidden_output = np.random.randn(hidden_size, output_size)
biases_hidden_output = np.zeros((1, output_size))

# Training parameters
learning_rate = 0.01
epochs = 1000

# Training the neural network with backpropagation
for epoch in range(epochs):
    # Forward pass
    hidden_layer_input = np.dot(X, weights_input_hidden) + biases_input_hidden
    hidden_layer_output = sigmoid(hidden_layer_input)

    output_layer_input = np.dot(hidden_layer_output, weights_hidden_output) + biases_hidden_output
    predicted_output = sigmoid(output_layer_input)

    # Calculate loss
    loss = mean_squared_error(y, predicted_output) 

    # Backpropagation
    output_error = y - predicted_output
    output_delta = output_error * sigmoid_derivative(predicted_output)

    hidden_layer_error = output_delta.dot(weights_hidden_output.T)
    hidden_layer_delta = hidden_layer_error * sigmoid_derivative(hidden_layer_output)

    # Update weights and biases
    weights_hidden_output += hidden_layer_output.T.dot(output_delta) * learning_rate
    biases_hidden_output += np.sum(output_delta, axis=0, keepdims=True) * learning_rate

    weights_input_hidden += X.T.dot(hidden_layer_delta) * learning_rate
    biases_input_hidden += np.sum(hidden_layer_delta, axis=0, keepdims=True) * learning_rate

    # Print loss every 100 epochs
    if epoch % 100 == 0:
        print(f"Epoch {epoch}, Loss: {loss}")

# Make predictions on the training set
final_predictions = sigmoid(np.dot(sigmoid(np.dot(X, weights_input_hidden) + biases_input_hidden),
                                  weights_hidden_output) + biases_hidden_output)
final_predictions_binary = (final_predictions > 0.5).astype(int)

# Evaluate the model
accuracy = np.mean(final_predictions_binary == y)
print(f"Training Accuracy: {accuracy}")

print(f"Bias: {neuron.bias}")
print(f"Output: {output}")
